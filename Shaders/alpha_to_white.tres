[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://cew0ar1d4pxal"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_wxedf"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_2ifgw"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_twntm"]
input_name = "uv"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_4qo4k"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(1, 1, 1)]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, n_out4p0);
	float n_out3p4 = n_out3p0.a;


	vec3 n_out5p0;
// If:5
	float n_in5p1 = 1.00000;
	float n_in5p2 = 0.00001;
	vec3 n_in5p4 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out3p4 - n_in5p1) < n_in5p2)
	{
		n_out5p0 = vec3(n_out3p0.xyz);
	}
	else if(n_out3p4 < n_in5p1)
	{
		n_out5p0 = vec3(n_out3p0.xyz);
	}
	else
	{
		n_out5p0 = n_in5p4;
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(640, 120)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_wxedf")
nodes/fragment/2/position = Vector2(-360, 160)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_2ifgw")
nodes/fragment/3/position = Vector2(20, 100)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_twntm")
nodes/fragment/4/position = Vector2(-380, 60)
nodes/fragment/5/node = SubResource("VisualShaderNodeIf_4qo4k")
nodes/fragment/5/position = Vector2(360, 60)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 2, 4, 0, 3, 0, 3, 4, 5, 0, 5, 0, 0, 0, 3, 0, 5, 3, 3, 0, 5, 5)
